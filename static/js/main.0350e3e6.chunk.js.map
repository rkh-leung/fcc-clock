{"version":3,"sources":["assets/data-scaner.wav","App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","initType","useState","breakLength","setBreakLength","sessionLength","setSessionLength","timer","setTimer","play","setPlay","process","setProcess","session","setSession","alarm","document","querySelector","increment","prevState","e","Number","target","value","decrement","useEffect","timerId","window","setInterval","catch","console","log","clearInterval","className","id","onClick","Math","floor","src","sound","pause","currentTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0350e3e6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/data-scaner.f5aeae94.wav\";","import React, { useEffect, useState } from 'react'\nimport sound from './assets/data-scaner.wav'\nimport './App.css'\n\nfunction App() {\n  let initBreak: number = 5\n  let initSession: number = 25\n  let sessionStatus: string = 'Session' // Display Session | Break\n  let initType: string = 'stop' // app process state: running | stop\n  let initStatus: boolean = false // play/pause state\n\n  const [breakLength, setBreakLength] = useState(initBreak)\n  const [sessionLength, setSessionLength] = useState(initSession)\n  const [timer, setTimer] = useState(sessionLength * 60)\n  const [play, setPlay] = useState(initStatus)\n  const [process, setProcess] = useState(initType)\n  const [session, setSession] = useState(sessionStatus)\n  const alarm = document.querySelector('#beep')! as HTMLAudioElement\n\n  const increment = (prevState: number, e: React.BaseSyntheticEvent) =>\n    prevState < 60 ? prevState + Number(e.target.value) : 60\n  const decrement = (prevState: number, e: React.BaseSyntheticEvent) =>\n    prevState <= 2 ? 1 : prevState + Number(e.target.value)\n  const sessionInc = (e: React.BaseSyntheticEvent) =>\n    setSessionLength((prevState) => increment(prevState, e))\n  const sessionDec = (e: React.BaseSyntheticEvent) =>\n    setSessionLength((prevState) => decrement(prevState, e))\n  const breakInc = (e: React.BaseSyntheticEvent) =>\n    setBreakLength((prevState) => increment(prevState, e))\n  const breakDec = (e: React.BaseSyntheticEvent) =>\n    setBreakLength((prevState) => decrement(prevState, e))\n  const resetHandler = () => {\n    setBreakLength(() => initBreak)\n    setSessionLength(() => initSession)\n    setTimer(() => sessionLength * 60)\n    setPlay(() => initStatus)\n    setProcess(() => initType)\n    setSession(() => 'Session')\n    if (alarm) {\n      alarm.pause()\n      alarm.currentTime = 0\n    }\n  }\n  const startBtn = () => {\n    if (process === 'stop') {\n      setTimer(() => sessionLength * 60)\n    }\n    setProcess(() => 'running')\n    setPlay((prevState) => !prevState)\n  }\n  const pauseBtn = () => {\n    setPlay((prevState) => !prevState)\n  }\n\n  useEffect(() => {\n    let timerId: number\n    if (play) {\n      timerId = window.setInterval(\n        () => setTimer((prevState) => prevState - 1),\n        1000\n      )\n      if (timer === 0) {\n        alarm.play().catch((e) => console.log(e))\n        setPlay(() => false)\n        if (session === 'Session') {\n          setTimer(() => breakLength * 60)\n          setSession(() => 'Break')\n          setPlay(() => true)\n        }\n        if (session === 'Break') {\n          setTimer(() => sessionLength * 60)\n          setSession(() => 'Session')\n        }\n      }\n    }\n    return () => window.clearInterval(timerId)\n  }, [play, timer])\n\n  return (\n    <div className='App'>\n      <header className='App-header'>FCC 25+5 Clock</header>\n      <div id={'break-label'}>Break Length</div>\n      <button\n        className={'fa fa-arrow-down'}\n        id={'break-decrement'}\n        onClick={breakDec}\n        value={-1}\n      />\n      <span id={'break-length'}>{breakLength}</span>\n      <button\n        className={'fa fa-arrow-up'}\n        id={'break-increment'}\n        onClick={breakInc}\n        value={1}\n      />\n      <div id={'session-label'}>Session Length</div>\n      <button\n        className={'fa fa-arrow-down'}\n        id={'session-decrement'}\n        onClick={sessionDec}\n        value={-1}\n      />\n      <span id={'session-length'}>{sessionLength}</span>\n      <button\n        className={'fa fa-arrow-up'}\n        id={'session-increment'}\n        onClick={sessionInc}\n        value={1}\n      />\n      <div id={'timer-label'}>{session}</div>\n      <div id={'time-left'}>\n        {process === 'stop'\n          ? sessionLength < 10\n            ? `0${sessionLength}`\n            : sessionLength\n          : Math.floor(timer / 60) < 10\n          ? `0${Math.floor(timer / 60)}`\n          : Math.floor(timer / 60)}\n        :{timer % 60 < 10 ? `0${timer % 60}` : timer % 60}\n        {console.log('timer', timer)}\n        {console.log('sessionLength', sessionLength)}\n        {console.log('play', play)}\n        {console.log('process', process)}\n        <audio src={sound} id={'beep'} />\n      </div>\n      <div id={'control'}>\n        <button\n          className={'fas fa-play'}\n          id={'start_stop'}\n          onClick={startBtn}\n        />\n        <button className={'fas fa-redo'} id={'reset'} onClick={resetHandler} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}